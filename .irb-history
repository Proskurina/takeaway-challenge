player.board.place(ship, 'D', :vertically)
ship = Ship.new(3)
board.place(ship, :A3, :vertically)
board.grid.keys
board.grid.values
ship = Ship.new(1)
board.place(ship, :A1, :vertically)
a = []
a.size
board.place_ships_auto
board
board.place_ships_auto(3)
board.place(ship, :G9)
:G9.to_s.reverse.next.reverse.to_sym
board = Board.new(Cell)
ship = Ship.new(2)
board.place(ship, :G9, :horizontally)
:G9.next
:G8.next
coord = :G9
coord = 'G9'
coord[0]+(coord[1]+1).to_s
coord[0]+(coord[1].to_i+1).to_s
comp.choose['rock', 'paper', 'scissors']
comp.choose ['rock', 'paper', 'scissors']
comp.choice(['1', '2', '3'])
comp = Computer.new
comp.make_choice['rock', 'paper', 'scissors']
comp.make_choice(['rock', 'paper', 'scissors'])
comp.choice
player1 = Player.new "John"
game.add_player(player1)
player2 = Computer.new
game.add_player player2
player3 = Player.new 1
game.add_player player3
game
game.player1.choice = 'rock'
game.player2.make_choice
game.player2.make_choice(options)
game.player2.make_choice(game.options)
game.score
player1 = Player.new
computer = Computer.new
game.add_player computer
game.computer_choice
computer.choice
player.choice = 'paper'
player.choice= 'paper'
player1.choice= 'paper'
game.winner
game = Game.new
player1 = Player.new('John')
game.add_player player1
p game
player1.choice
until a
a = 1
eit
DataMapper.setup(:default, "postgres://localhost/database_play")
class Student
property :name, String
Student.create(name: "Ptolemy")
\l
Student.delete(id: 1)
Student.destroy(id: 1)
Student.destroy
Student.create(nsme: 'John')
Student.create(name: 'John')
Student.delete(name: 'Ptolemy')
Student.destroy(name: 'Ptolemy')
require 'data_mapper'
require 'dm-postgres-adapter'
DataMapper::Logger.new($stdout, :debug)
DataMapper.setup(:default, "postgres://localhost/some_database")
class Links
include DataMapper::Resource
property :id, Serial
property :title, String
property :url, String
end
DataMapper.finalize
Link.create(title: 'Google', url: 'www.google.com')
Links.create(title: 'Google', url: 'www.google.com')
Links.destroy (id == 3)
Links.destroy ('id' == 3)
plane = Plane.new
plane.flying?
plane.land
plane.status= false
plane.take_off
plane.status
customer = Customer.new
customer.add_dish(:pizza, 1)
customer.add_dish(:dip, 1)
customer.my_list
customer.total_correct(16)
customer.total_correct(13.48)
customer.place_order(13.48)
exit
